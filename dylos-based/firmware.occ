#INCLUDE "plumbing.module"
#INCLUDE "twi3.module"
#INCLUDE "ds1307.module"

-- When doing desting, this should
-- be defined. It enables a dummy clock and
-- lets things run faster.
-- #DEFINE TEST.RUN

-- Number of characters from the Dylos
VAL INT DCHAR IS 20:

-- In seconds...
#IF DEFINED (TEST.RUN)
VAL INT SLEEP.SECONDS IS 10:
#ELSE
VAL INT SLEEP.SECONDS IS 50:
#ENDIF

-- STATUS LEDs
VAL INT SLEEPING.LED IS 6:
VAL INT WAITING.FOR.SERIAL.LED IS 7:
VAL INT ISGD.LED IS 8:

-- It turns out that the SD card
-- is automatically slept when nothing 
-- is being sent... so, really, this is 
-- almost ready for a low-power TVM.

DATA TYPE READING
  RECORD
    BYTE date:
    BYTE hours:
    BYTE minutes:
    [DCHAR]BYTE particle.count:
:

PROC long.delay (VAL INT seconds)
  SEQ i = 0 FOR seconds
    delay (960)
:

PROC sleep.and.ping (VAL INT sec, CHAN SIGNAL done?, ping!)
  SEQ
    digital.mode (13, OUTPUT)
    WHILE TRUE
      SEQ
        done ? SIGNAL
        digital.write (SLEEPING.LED, HIGH)
        long.delay (sec)
        digital.write (SLEEPING.LED, LOW)
        ping ! SIGNAL
:

PROC signal.mux ([]CHAN SIGNAL ctrl, CHAN SIGNAL o!)
  WHILE TRUE
    SEQ
      ALT i = 0 FOR (SIZE ctrl)
        ctrl[i] ? SIGNAL
          SKIP
      o ! SIGNAL
:

PROC wait.for.dylos (CHAN SIGNAL go?, CHAN [DCHAR]BYTE particle.count!)
  [DCHAR]BYTE msg:
  WHILE TRUE
    SEQ
      go ? SIGNAL

      -- Zero out the message buffer.
      SEQ ndx = 0 FOR DCHAR
        msg[ndx] := 0
       
      digital.write (WAITING.FOR.SERIAL.LED, HIGH)

      -- Wait for the Dylos to send us a message.
      -- The leng variable is coming back as crap.
      INT bogo:
      serial.buffer.read ('*n', msg, bogo)
      
      digital.write (WAITING.FOR.SERIAL.LED, LOW)
      

      -- Send that along.
      particle.count ! msg
:

PROC dummy.dylos (CHAN SIGNAL go?, CHAN [DCHAR]BYTE pc!)
  [DCHAR]BYTE msg:
  WHILE TRUE
    SEQ
      go ? SIGNAL

      -- Zero out the message buffer.
      SEQ ndx = 0 FOR DCHAR
        msg[ndx] := 0

      delay (2000)
      
      msg[0] := 'h'
      msg[1] := 'i'
      msg[2] := '*n'
      
      pc ! msg
:

PROC create.reading (CHAN [DCHAR]BYTE particle.count?, CHAN READING r!)
  READING pkt:
  WHILE TRUE
    SEQ
      particle.count ? pkt[particle.count]
      r ! pkt
:

PROC add.timestamp (CHAN READING in?, out!)
  [3]INT hms:
  #PRAGMA DEFINED hms
  BYTE date:
  READING pkt:
  WHILE TRUE
    SEQ
      in ? pkt
      -- Read from the DS1307
      ds1307.get.time (hms)
      ds1307.get.date (date)
      -- Write it into the reading structure
      pkt[date]     := date
      pkt[hours]   := (BYTE hms[0])
      pkt[minutes] := (BYTE hms[1])
      -- Send the reading along
      out ! pkt
:

INLINE PROC serial.write.comma (VAL INT port)
  serial.write.string (port, ",")
:

INLINE PROC crnl ()
  SEQ
    serial.write.byte (TX0, #0D)
    serial.write.byte (TX0, #0A)
:

PROC openlog.flush ()
  SEQ
    SEQ i = 0 FOR 3
      serial.write.byte (TX0, #1A)
    serial.write.string (TX0, "sync")
    crnl ()
:

-- The OpenLog under v3 firmware will automatically 
-- sleep to 1.55mA after 1/2sec of not receiving anything.
-- It wakes and stores on character send, so there is 
-- no reason for ham-fisted power management in this 
-- app (ie. turning the OpenLog on and off in the process.)
PROC write.to.card (CHAN READING in?, CHAN SIGNAL done!)
  SEQ
    digital.mode (7, OUTPUT)
    READING pkt:
    WHILE TRUE
      SEQ
        in ? pkt
        serial.write.dec.int (TX0, (INT pkt[date]))
        serial.write.comma (TX0)
        serial.write.dec.int (TX0, (INT pkt[hours]))
        serial.write.comma (TX0)
        serial.write.dec.int (TX0, (INT pkt[minutes]))
        serial.write.comma (TX0)
        SEQ ndx = 0 FOR DCHAR
          IF
            pkt[particle.count][ndx] > 20
              serial.write.byte(TX0, pkt[particle.count][ndx])
            TRUE
              SKIP
        serial.write.newline(TX0)
        -- Flush to disk.
        -- This should happen automatically after 5 seconds.
        -- openlog.flush()

        -- I forgot this in the first write.
        -- I suspect this is why I deadlocked...
        -- And, I was correct. One line.
        done ! SIGNAL
:

PROC setup () 
  [3]INT hms:
  #PRAGMA DEFINED hms
  BYTE date:
  SEQ
    serial.setup (TX0, 9600)

    digital.mode (SLEEPING.LED, OUTPUT)
    digital.mode (WAITING.FOR.SERIAL.LED, OUTPUT)
    digital.mode (ISGD.LED, OUTPUT)

    -- This is essentially a power indicator.
    digital.write (ISGD.LED, HIGH)
:

PROC main ()
  CHAN SIGNAL done, go:
  [2]CHAN SIGNAL ctrl:
  CHAN [DCHAR]BYTE particle.count:
  CHAN READING r0, r1:
  SEQ
    setup () 
    PAR
      signal.mux (ctrl, go!)

      #IF DEFINED (TEST.RUN)
      dummy.dylos (go?, particle.count!)
      #ELSE
      wait.for.dylos (go?, particle.count!)
      #ENDIF
      
      create.reading (particle.count?, r0!)
      add.timestamp  (r0?, r1!)
      write.to.card  (r1?, done!)
      sleep.and.ping  (SLEEP.SECONDS, done?, ctrl[1]!)

      -- Kick things off.
      ctrl[0] ! SIGNAL
:
